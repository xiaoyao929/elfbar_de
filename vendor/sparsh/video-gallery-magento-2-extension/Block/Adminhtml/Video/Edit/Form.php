<?php

/**
 * PHP version 7.1
 *
 * @category  Sparsh
 * @package   Sparsh_VideoGallery
 * @author    Sparsh <magento@sparsh-technologies.com>
 * @copyright 2019 This file was generated by Sparsh
 * @license   https://www.sparsh-technologies.com  Open Software License (OSL 3.0)
 * @link      https://www.sparsh-technologies.com
 */

namespace Sparsh\VideoGallery\Block\Adminhtml\Video\Edit;

use Magento\Backend\Block\Widget\Form\Element\Dependence;
use Sparsh\VideoGallery\Ui\Component\Form\CustomerGroups;

/**
 * Sparsh videogallery detail edit form
 * PHP version 7.1
 *
 * @category  Sparsh
 * @package   Sparsh_VideoGallery
 * @author    Sparsh <magento@sparsh-technologies.com>
 * @copyright 2019 This file was generated by Sparsh
 * @license   https://www.sparsh-technologies.com  Open Software License (OSL 3.0)
 * @link      https://www.sparsh-technologies.com
 */
class Form extends \Magento\Backend\Block\Widget\Form\Generic
{
    /**
     * @var CustomerGroups
     */
    private $customerGroups;
    /**
     * @var \Magento\Store\Ui\Component\Listing\Column\Store\Options
     */
    private $storeOptions;
    /**
     * @var \Magento\Store\Model\System\Store
     */
    private $systemStore;

    /**
     * Variable Initiallize
     *
     * @param \Magento\Backend\Block\Template\Context $context     Initiallize Context
     * @param \Magento\Framework\Registry             $registry    Initiallize registery
     * @param \Magento\Framework\Data\FormFactory     $formFactory Initiallize formfactory
     * @param \Magento\Store\Model\System\Store       $systemStore Initiallize systemstore
     * @param array                                   $data        data array
     */
    public function __construct(
        \Sparsh\VideoGallery\Ui\Component\Form\CustomerGroups $customerGroups,
        \Magento\Backend\Block\Template\Context $context,
        \Magento\Framework\Registry $registry,
        \Magento\Framework\Data\FormFactory $formFactory,
        \Magento\Store\Model\System\Store $systemStore,
        array $data = []
    ) {
        $this->systemStore = $systemStore;
        $this->customerGroups = $customerGroups;
        parent::__construct($context, $registry, $formFactory, $data);
    }

    /**
     * Init form
     *
     * @return void
     */
    protected function _construct()
    {
        parent::_construct();
        $this->setId('video_form');
        $this->setTitle(__('Video Information'));
    }

    /**
     * Prepare form
     *
     * @return $this
     */
    protected function _prepareForm()
    {
        /**
         * Core registery
         *
         * @var \Sparsh\Videogallery\Model\video $model
         */
        $model = $this->_coreRegistry->registry('videogallery_video');

        /**
         * Send form tag
         *
         * @var \Magento\Framework\Data\Form $form
         */
        $form = $this->_formFactory->create(
            ['data' => [
                'id' => 'edit_form',
                'action' => $this->getData('action'),
                'method' => 'post', 'enctype' => 'multipart/form-data'
            ]]
        );

        $fieldset = $form->addFieldset(
            'base_fieldset',
            ['legend' => __('General Information'), 'class' => 'fieldset-wide']
        );

        if ($model->getId()) {
            $fieldset->addField('id', 'hidden', ['name' => 'id']);
        }

        $fieldset->addField(
            'title',
            'text',
            [
                'name' => 'title',
                'label' => __('Video Title'),
                'title' => __('Video Title'),
                'required' => true
            ]
        );

        $action = $fieldset->addField(
            "Video Upload",
            "select",
            [
                "label"     =>      __("Video Upload Method"),
                "class"     =>      "required-entry",
                "name"      =>      "Video Upload Method",
                "options"   => ['' => __('Please Select'), 'youtube' => __('YouTube'), 'vimeo' => __('Vimeo'), 'from_pc' => __('From PC')],
                "required"  =>true
            ]
        );

        if ($model->getVideoUploadMethod()) {
            $model->setData('Video Upload', $model->getVideoUploadMethod() == 'from_pc' ? 'from_pc' : $model->getVideoUploadMethod());
        }

        if ($model->getVideoUploadMethod() && $model->getVideoUploadMethod() != 'from_pc') {
            $model->setData($model->getVideoUploadMethod(), $model->getFile());
        }

        if ($model->getVideoUploadMethod() && $model->getVideoUploadMethod() == 'from_pc') {
            $model->setData('old_video', $model->getFile());
            $model->setData('From_PC', $model->getFile());

            $field1 = $fieldset->addField(
                "uploaded_video",
                "text",
                [
                    "label"     => __("Uploaded File"),
                    "name"      => "uploaded_video",
                    "readonly"  => true,
                    "disabled"  => true
                ]
            );
            $model->setData('uploaded_video', $model->getFile());
        }

        $field1 = $fieldset->addField(
            "youtube",
            "text",
            [
                "label"     => __("Youtube Code"),
                "class"     => "required-entry",
                "required"  => true,
                "name"      => "youtube",
                "note"      => __("Please add code 'XXXXXXXXXXX' from https://www.youtube.com/watch?v=XXXXXXXXXXX")
            ]
        );

        if ($model->getVideoUploadMethod() && $model->getVideoUploadMethod() == 'from_pc') {
            $field2 = $fieldset->addField(
                "From_PC",
                "file",
                [
                    "label"     => __("From PC"),
                    "name"      => "From_PC",
                    "note"      => __("Allowed video type: mp4" . '<br>' . "Make sure upload_max_filesize and post_max_size in php.ini are set as per your uploaded video file size.")
                ]
            );

            $fieldset->addField(
                "old_video",
                "hidden",
                [
                    "label"     => __("Old Video"),
                    "class"     => "required-entry",
                    "required"  => true,
                    "name"      => "old_video"
                ]
            );
        } else {
            $field2 = $fieldset->addField(
                "From_PC",
                "file",
                [
                    "label"     => __("From PC"),
                    "class"     => "required-entry",
                    "required"  => true,
                    "name"      => "From_PC",
                    "note"      => __("Allowed video type: mp4" . '<br>' . "Make sure upload_max_filesize and post_max_size in php.ini are set as per your uploaded video file size.")
                ]
            );
        }

        $field3 = $fieldset->addField(
            "vimeo",
            "text",
            [
                "label"     => __("Vimeo Code"),
                "class"     => "required-entry",
                "required"  => true,
                "name"      => "vimeo",
                "note"      => __("Please add code 'XXXXXXXXXXX' from https://vimeo.com/XXXXXXXXX")
            ]
        );

        $this->setChild(
            'form_after',
            $this->getLayout()->createBlock(Dependence::class)
                ->addFieldMap($action->getHtmlId(), $action->getName())
                ->addFieldMap($field1->getHtmlId(), $field1->getName())
                ->addFieldDependence($field1->getName(), $action->getName(), 'youtube')
                ->addFieldMap($field2->getHtmlId(), $field2->getName())
                ->addFieldDependence($field2->getName(), $action->getName(), 'from_pc')
                ->addFieldMap($field3->getHtmlId(), $field3->getName())
                ->addFieldDependence($field3->getName(), $action->getName(), 'vimeo')
        );

        $fieldset->addField(
            'description',
            'editor',
            [
                'name' => 'description',
                'label' => __('Video Description'),
                'title' => __('Video Description'),
                'style' => 'height:10em',
                'required' => false
            ]
        );

        $fieldset->addField(
            'stores',
            'multiselect',
            [
                'label' => __('Store Views'),
                'title' => __('Store Views'),
                'name' => 'stores',
                'values' => $this->systemStore->getStoreValuesForForm(false, true),
                'required' => true
            ]
        );

        $fieldset->addField(
            'customer_groups',
            'multiselect',
            [
                'label' => __('Customer Groups'),
                'title' => __('Customer Groups'),
                'name' => 'customer_groups',
                'values' => $this->customerGroups->toOptionArray(),
                'required' => true
            ]
        );

        $fieldset->addField(
            'position',
            'text',
            [
                'name' => 'position',
                'label' => __('Position'),
                'title' => __('Position'),
                'class'     => 'required-entry validate-number',
                'required' => true
            ]
        );

        $fieldset->addField(
            'is_active',
            'select',
            [
                'label' => __('Status'),
                'title' => __('Status'),
                'name' => 'is_active',
                'required' => true,
                'options' => ['1' => __('Enabled'), '0' => __('Disabled')]
            ]
        );

        if (!$model->getId()) {
            $model->setData('is_active', '1');
        }

        $form->setValues($model->getData());
        $form->setUseContainer(true);
        $this->setForm($form);

        return parent::_prepareForm();
    }
}
